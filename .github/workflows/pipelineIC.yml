name: Workflow
on:
  push:
jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
            
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: npm install
        
      - name: Run build
        run: npm run build

      - name: SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=gotelloc 
            -Dsonar.projectKey=gotelloc_Laboratorio-final
            -Dsonar.exclusions=**/node_modules/**
            
      - name: Validate Quality Gate
        run: |
          qualitygate=$(curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=gotelloc_Laboratorio-final&branch=feature-Gonzalo-Tello')
          qualitygateStatus=$(echo "$qualitygate" | jq .projectStatus.status | sed -e 's/^"//' -e 's/"$//')
  
          case $qualitygateStatus in
              *"OK"*)
                echo "Proyecto Cumple con quality gate"
                exit 0
                ;;
              *"ERROR"*)
                echo "Proyecto NO cumple con QualityGate"
                exit 1
                ;;
              *)
                echo "Proyecto NO cumple"
                exit 1
                ;;
            esac
            
      
          
#--------------------- SCA -------------------------------------------
  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install
        
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
        
      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env: 
            JAVA_HOME: /opt/jdk
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 1.0
            --enableRetired
            
      - name: Upload Test result
        uses: actions/upload-artifact@v2
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports

      - name: Run Snyk to check for vulnerabilities
        id: snyk_ scan 
        uses: snyk/actions/node@master
        env:
          SNYK TOKEN:  ${{ secrets.SNYK_TOKEN }} 
        with:
          args: --all-projects --severity-threshold=high --json > snyk-output.json
          
  # ----------------- Docker Build Image ----------------------------------------
  
  DockerBuild:
    needs: SCA
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Yarn
      run: npm install -g yarn

    - name: Install dependencies
      run: yarn install

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Set up Docker 
      uses: docker/setup-buildx-action@v3

    - name: Docker build
      run: |
        docker build --build-arg TMDB_V3_API_KEY=0a5c76f39b37918e45f6a8e56b8509c5 -t gotelloc/laboratorio-final:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'gotelloc/laboratorio-final:latest'
        format: 'table'
    
    - name: Docker push
      run: |
        docker push gotelloc/laboratorio-final:latest


    #--------------------- k8s local  ------------------------------------------------------

  k8local: 
    needs: DockerBuild
    runs-on: self-hosted
    steps:
    
      - name: Clonacion de codigo
        uses: actions/checkout@v4
  
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Yarn
        run: npm install -g yarn
  
      - name: Install dependencies
        run: yarn install
  
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Docker build
        run: |
          docker build --build-arg TMDB_V3_API_KEY=0a5c76f39b37918e45f6a8e56b8509c5 -t gotelloc/laboratorio-final:latest .
  
      - name: Push Docker
        run: |
          docker push gotelloc/laboratorio-final:latest

        
    #  - name: Despliegue
     #   run: |
      #    kubectl apply -f deploy.yaml
          
  
  #--------------------- DAST ------------------------------------------------------

  DAST: 
    needs: k8local
    runs-on: self-hosted
    steps:

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8080'
    
